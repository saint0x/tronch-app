{
  "contractTemplate": "pragma solidity ^0.8.0;\n\n// Contract Details:\n// Client Name: {{clientName}}\n// Client Email: {{clientEmail}}\n// Payment Amount: {{paymentAmount}}\n// Requirements: {{requirements}}\n// Description: {{description}}\n\ncontract CustomContract {\n    address payable public client;\n    address payable public seller;\n    string public clientName;\n    string public clientEmail;\n    uint public expirationDate;\n    uint public paymentAmount;\n    string public requirements;\n    string public description;\n    bool public isEscrowInitiated;\n    bool public isConfirmed;\n    bool public isDisputed;\n\n    event EscrowInitiated(address client, address seller, uint amount, uint timestamp);\n    event ReceiptConfirmed(uint timestamp);\n    event EscrowDisputed(uint timestamp);\n    event DisputeResolved(bool resolved, uint timestamp);\n\n    modifier onlyClient() {\n        require(msg.sender == client, \"Only client can call this function\");\n        _;\n    }\n\n    modifier onlySeller() {\n        require(msg.sender == seller, \"Only seller can call this function\");\n        _;\n    }\n\n    constructor(string memory _clientName, string memory _clientEmail, uint _paymentAmount, string memory _requirements, string memory _description) {\n        client = payable(msg.sender);\n        clientName = _clientName;\n        clientEmail = _clientEmail;\n        expirationDate = block.timestamp + 30 days;\n        paymentAmount = _paymentAmount;\n        requirements = _requirements;\n        description = _description;\n    }\n\n    function initiateEscrow() public payable {\n        require(msg.value == paymentAmount, \"Incorrect payment amount\");\n        seller = payable(msg.sender);\n        isEscrowInitiated = true;\n\n        emit EscrowInitiated(client, seller, msg.value, block.timestamp);\n    }\n\n    function confirmReceipt() public onlyClient {\n        require(isEscrowInitiated, \"Escrow has not been initiated yet\");\n        isConfirmed = true;\n\n        emit ReceiptConfirmed(block.timestamp);\n    }\n\n    function disputeEscrow() public onlyClient {\n        require(isEscrowInitiated, \"Escrow has not been initiated yet\");\n        isDisputed = true;\n\n        emit EscrowDisputed(block.timestamp);\n    }\n\n    function resolveDispute(bool resolved) public onlySeller {\n        require(isDisputed, \"No dispute exists to resolve\");\n        isDisputed = false;\n\n        emit DisputeResolved(resolved, block.timestamp);\n    }\n\n    function getTransactionDetails() public view returns (address, address, string memory, string memory, uint, string memory, string memory, bool, bool, bool) {\n        return (client, seller, clientName, clientEmail, paymentAmount, requirements, description, isEscrowInitiated, isConfirmed, isDisputed);\n    }\n}"
}
